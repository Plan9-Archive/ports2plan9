This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by configure, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  $ ./configure --prefix=/386

## --------- ##
## Platform. ##
## --------- ##

hostname = cirno
uname -m = i386
uname -r = 4
uname -s = Plan9
uname -v = 0

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /bin
PATH: .


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2335: checking for a BSD-compatible install
configure:2403: result: build-aux/install-sh -c
configure:2414: checking whether build environment is sane
configure:2464: result: yes
configure:2605: checking for a thread-safe mkdir -p
configure:2644: result: build-aux/install-sh -c -d
configure:2657: checking for gawk
configure:2673: found /bin/gawk
configure:2684: result: gawk
configure:2695: checking whether make sets $(MAKE)
configure:2717: result: yes
configure:2850: checking for gcc
configure:2880: result: no
configure:2943: checking for cc
configure:2964: found /bin/cc
configure:2987: result: cc
configure:3106: checking for C compiler version
configure:3115: cc --version >&5
cc: flag -- ignored
cc: flag -e ignored
cc: flag -r ignored
cc: flag -i ignored
cc: no files to compile or load
configure:3126: $? = 1
configure:3115: cc -v >&5
cc: no files to compile or load
configure:3126: $? = 1
configure:3115: cc -V >&5
cc: flag -V ignored
cc: no files to compile or load
configure:3126: $? = 1
configure:3115: cc -qversion >&5
cc: flag -q ignored
cc: flag -e ignored
cc: flag -r ignored
cc: flag -i ignored
cc: no files to compile or load
configure:3126: $? = 1
configure:3146: checking whether the C compiler works
configure:3168: cc -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
configure:3172: $? = 0
configure:3220: result: yes
configure:3223: checking for C compiler default output file name
configure:3225: result: a.out
configure:3231: checking for suffix of executables
configure:3238: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
configure:3242: $? = 0
configure:3264: result: 
configure:3286: checking whether we are cross compiling
configure:3294: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
configure:3298: $? = 0
configure:3305: ./conftest
configure:3309: $? = 0
configure:3324: result: no
configure:3329: checking for suffix of object files
configure:3351: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:3355: $? = 0
configure:3376: result: o
configure:3380: checking whether we are using the GNU C compiler
configure:3399: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:16[stdin:17] syntax error, last name: me
configure:3399: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:3408: result: no
configure:3417: checking whether cc accepts -g
configure:3437: cc -c -g  conftest.c >&5
configure:3437: $? = 0
configure:3478: result: yes
configure:3495: checking for cc option to accept ISO C89
configure:3559: cc  -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:3559: $? = 0
configure:3572: result: none needed
configure:3603: checking for style of include used by make
configure:3631: result: GNU
configure:3656: checking dependency style of cc
configure:3766: result: none
configure:3786: checking how to run the C preprocessor
configure:3817: cc -E  conftest.c
configure:3817: $? = 0
configure:3831: cc -E  conftest.c
configure:3831: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:3856: result: cc -E
configure:3876: cc -E  conftest.c
configure:3876: $? = 0
configure:3890: cc -E  conftest.c
configure:3890: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:3923: checking build system type
configure:3937: result: i386-unknown-plan9
configure:3957: checking host system type
configure:3970: result: i386-unknown-plan9
configure:3993: checking host platform
configure:4012: result: i386-unknown-plan9
configure:4067: checking how to print strings
configure:4096: result: print -r
configure:4115: checking for a sed that does not truncate output
configure:4179: result: /bin/gsed
configure:4197: checking for grep that handles long lines and -e
configure:4255: result: grep
configure:4260: checking for egrep
configure:4322: result: /bin/egrep
configure:4327: checking for fgrep
configure:4389: result: /bin/fgrep
configure:4457: checking for non-GNU ld
configure:4491: result: /bin/ld
configure:4498: checking if the linker (/bin/ld) is GNU ld
configure:4513: result: no
configure:4525: checking for BSD- or MS-compatible name lister (nm)
configure:4574: result: /bin/nm
configure:4704: checking the name lister (/bin/nm) interface
configure:4711: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:4714: /bin/nm "conftest.o"
configure:4717: output
 D some_variable
configure:4724: result: BSD nm
configure:4727: checking whether ln -s works
configure:4734: result: no, using cp -p
configure:4739: checking the maximum length of command line arguments
configure:4864: result: 512
configure:4881: checking whether the shell understands some XSI constructs
configure:4891: result: yes
configure:4895: checking whether the shell understands "+="
configure:4901: result: no
configure:4936: checking how to convert i386-unknown-plan9 file names to i386-unknown-plan9 format
configure:4976: result: func_convert_file_noop
configure:4983: checking how to convert i386-unknown-plan9 file names to toolchain format
configure:5003: result: func_convert_file_noop
configure:5010: checking for /bin/ld option to reload object files
configure:5017: result: -r
configure:5091: checking for objdump
configure:5121: result: no
configure:5150: checking how to recognize dependent libraries
configure:5352: result: unknown
configure:5437: checking for dlltool
configure:5467: result: no
configure:5497: checking how to associate runtime and link libraries
configure:5524: result: print -r --
configure:5585: checking for ar
configure:5601: found /bin/ar
configure:5612: result: ar
configure:5649: checking for archiver @FILE support
configure:5666: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:5666: $? = 0
configure:5669: ar cru libconftest.a @conftest.lst >&5
ar: @conftest.lst cannot open
configure:5672: $? = 0
configure:5677: ar cru libconftest.a @conftest.lst >&5
ar: @conftest.lst cannot open
configure:5680: $? = 0
configure:5692: result: no
configure:5750: checking for strip
configure:5766: found /bin/strip
configure:5777: result: strip
configure:5849: checking for ranlib
configure:5865: found /bin/ranlib
configure:5876: result: ranlib
configure:5978: checking command to parse /bin/nm output from cc object
configure:6097: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:6100: $? = 0
configure:6104: /bin/nm conftest.o \| sed -n -e 's/^.*[ ]\([BCDEGRST][BCDEGRST]*\)[ ][ ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | sed '/ __gnu_lto/d' \> conftest.nm
configure:6107: $? = 0
configure:6173: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c conftstm.o >&5
configure:6176: $? = 0
configure:6214: result: ok
configure:6251: checking for sysroot
configure:6281: result: no
configure:6524: checking for mt
configure:6554: result: no
configure:6574: checking if : is a manifest tool
configure:6580: : '-?'
configure:6588: result: no
configure:7216: checking for ANSI C header files
configure:7236: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7236: $? = 0
configure:7309: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
configure:7309: $? = 0
configure:7309: ./conftest
configure:7309: $? = 0
configure:7320: result: yes
configure:7333: checking for sys/types.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 0
configure:7333: result: yes
configure:7333: checking for sys/stat.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 0
configure:7333: result: yes
configure:7333: checking for stdlib.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 0
configure:7333: result: yes
configure:7333: checking for string.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 0
configure:7333: result: yes
configure:7333: checking for memory.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <memory.h>
configure:7333: result: no
configure:7333: checking for strings.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <strings.h>
configure:7333: result: no
configure:7333: checking for inttypes.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 0
configure:7333: result: yes
configure:7333: checking for stdint.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <stdint.h>
configure:7333: result: no
configure:7333: checking for unistd.h
configure:7333: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7333: $? = 0
configure:7333: result: yes
configure:7347: checking for dlfcn.h
configure:7347: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:7347: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| 
| #include <dlfcn.h>
configure:7347: result: no
configure:7533: checking for objdir
configure:7548: result: .libs
configure:8164: checking for cc option to produce PIC
configure:8171: result:  -DPIC
configure:8179: checking if cc PIC flag  -DPIC works
configure:8197: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   -DPIC -DPIC conftest.c >&5
configure:8201: $? = 0
configure:8214: result: yes
configure:8243: checking if cc static flag  works
configure:8271: result: yes
configure:8286: checking if cc supports -c -o file.o
configure:8307: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  -o out/conftest2.o conftest.c >&5
configure:8311: $? = 0
configure:8333: result: yes
configure:8341: checking if cc supports -c -o file.o
configure:8388: result: yes
configure:8421: checking whether the cc linker (/bin/ld) supports shared libraries
configure:9579: result: no
configure:9824: checking dynamic linker characteristics
configure:10560: result: no
configure:10667: checking how to hardcode library paths into programs
configure:10692: result: unsupported
configure:11232: checking whether stripping libraries is possible
configure:11254: result: no
configure:11272: checking if libtool supports shared libraries
configure:11274: result: no
configure:11277: checking whether to build shared libraries
configure:11298: result: no
configure:11301: checking whether to build static libraries
configure:11305: result: yes
configure:11348: checking sys/signal.h usability
configure:11348: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:11348: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/signal.h>
configure:11348: result: no
configure:11348: checking sys/signal.h presence
configure:11348: cc -E  conftest.c
configure:11348: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| #include <sys/signal.h>
configure:11348: result: no
configure:11348: checking for sys/signal.h
configure:11348: result: no
configure:11387: checking for unistd.h
configure:11387: result: yes
configure:11399: checking for getpagesize
configure:11422: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
main: undefined: getpagesize
configure:11422: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #if HAVE_UNISTD_H
| #include <sys/types.h>
| #include <unistd.h>
| #endif
| 
| int
| main ()
| {
| int pgsz = getpagesize();
|   ;
|   return 0;
| }
configure:11430: result: no
configure:11439: checking for sysconf(_SC_PAGESIZE)
configure:11462: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:31[stdin:304] name not declared: _SC_PAGESIZE
configure:11462: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #if HAVE_UNISTD_H
| #include <sys/types.h>
| #include <unistd.h>
| #endif
| 
| int
| main ()
| {
| int pgsz = sysconf (_SC_PAGESIZE);
|   ;
|   return 0;
| }
configure:11470: result: no
configure:11479: checking for PAGESIZE in limits.h
configure:11497: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:141] name not declared: PAGESIZE
configure:11497: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
|       #include <limits.h>
| int
| main ()
| {
| int pgsz = PAGESIZE;
|   ;
|   return 0;
| }
configure:11505: result: no
configure:11523: checking for mmap with MAP_ANON
configure:11573: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:24 Could not find include file <sys/mman.h>
cc: 8c: cpp 7396: errors
configure:11573: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: MAP_ANON
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: MAP_PRIVATE
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| int main ()
| {
|   void *p = mmap (0, 0x10000, PROT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE, -1, 0);
|   return (p == (void *)(-1));
| }
configure:11584: result: no
configure:11593: checking for mmap with MAP_ANONYMOUS
configure:11645: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:24 Could not find include file <sys/mman.h>
cc: 8c: cpp 7404: errors
configure:11645: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: MAP_ANONYMOUS
/usr/jens/dvl/libsigsegv-2.10/conftest.c:26[stdin:74] name not declared: MAP_PRIVATE
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| int main ()
| {
|   void *p = mmap (0, 0x10000, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);
|   return (p == (void *)(-1));
| }
configure:11656: result: no
configure:11665: checking for mmap of /dev/zero
configure:11728: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:24 Could not find include file <sys/mman.h>
cc: 8c: cpp 7412: errors
configure:11728: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:35[stdin:189] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:35[stdin:189] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:35[stdin:189] name not declared: MAP_PRIVATE
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #include <fcntl.h>
| #ifndef MAP_FILE
| #define MAP_FILE 0
| #endif
| int main ()
| {
|   int fd;
|   void *p;
|   fd = open ("/dev/zero", O_RDONLY, 0666);
|   if (fd < 0) return 1;
|   p = mmap (0, 0x10000, PROT_READ | PROT_WRITE, MAP_FILE | MAP_PRIVATE, fd, 0);
|   return (p == (void *)(-1));
| }
configure:11739: result: no
configure:11763: checking whether a fault handler according to POSIX works
configure:11898: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7420: errors
configure:11898: $? = 1
configure: program exited with status 1
:56[stdin:276] syntax error, last name: siginfo_t
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, siginfo_t *sip, void *ucp)
| {
|   void *fault_address = (void *) (sip->si_addr);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| action.sa_sigaction = &sigsegv_handler;
|    action.sa_flags = SA_SIGINFO;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:11909: result: no
configure:11917: checking whether a fault handler according to Linux/i386 works
configure:12053: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:28 Could not find include file <asm/sigcontext.h>
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7428: errors
configure:12053: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:57[stdin:276] incomplete structure: sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:58[stdin:277] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:284] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:284] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:311] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| #include <asm/sigcontext.h>
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, struct sigcontext sc)
| {
|   void *fault_address = (void *) (sc.cr2);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12064: result: no
configure:12072: checking whether a fault handler according to old Linux/i386 works
configure:12208: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7436: errors
configure:12208: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:312] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, unsigned int more)
| {
|   void *fault_address = (void *) (((unsigned long *) &more) [21]);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12219: result: no
configure:12227: checking whether a fault handler according to Linux/m68k works
configure:12365: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:28 Could not find include file <asm/sigcontext.h>
cpp: conftest.c:31 Could not find include file <sys/mman.h>
cc: 8c: cpp 7444: errors
configure:12365: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/././src/fault-linux-m68k-old.c:22[stdin:208] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/././src/fault-linux-m68k-old.c:23[stdin:209] pointer addition not fully declared: STRUCT sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:66[stdin:315] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:66[stdin:315] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:88[stdin:336] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:88[stdin:336] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:88[stdin:336] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:88[stdin:336] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:94[stdin:342] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| #include <asm/sigcontext.h>
| #include "./src/fault-linux-m68k-old.c"
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (get_fault_addr (scp));
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12376: result: no
configure:12384: checking whether a fault handler according to Linux/PowerPC works
configure:12520: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:28 Could not find include file <asm/sigcontext.h>
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7452: errors
configure:12520: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:58[stdin:277] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:284] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:284] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:305] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:311] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| #include <asm/sigcontext.h>
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (scp->regs->dar);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12531: result: no
configure:12539: checking whether a fault handler according to Linux/HPPA works
configure:12674: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7460: errors
configure:12674: $? = 1
configure: program exited with status 1
:56[stdin:276] syntax error, last name: siginfo_t
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, siginfo_t *sip, void *ucp)
| {
|   void *fault_address = (void *) (sip->si_ptr);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| action.sa_sigaction = &sigsegv_handler;
|    action.sa_flags = SA_SIGINFO;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12685: result: no
configure:12693: checking whether a fault handler according to BSD works
configure:12829: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7468: errors
configure:12829: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:312] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp, void *addr)
| {
|   void *fault_address = (void *) (addr);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12840: result: no
configure:12848: checking whether a fault handler according to IRIX works
configure:12984: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7476: errors
configure:12984: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:58[stdin:278] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:312] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) ((unsigned long) scp->sc_badvaddr);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:12995: result: no
configure:13003: checking whether a fault handler according to HP-UX HPPA works
configure:13149: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:33 Could not find include file <sys/mman.h>
cc: 8c: cpp 7484: errors
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:281] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:281] name not declared: SS_WIDEREGS
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:281] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:281] name not declared: SS_NARROWISINVALID
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:281] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:281] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:68[stdin:288] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:68[stdin:288] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:90[stdin:309] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:90[stdin:309] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:90[stdin:309] name not declared: map_flags
too many errors
configure:13149: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #define USE_64BIT_REGS(mc)   (((mc).ss_flags & SS_WIDEREGS) && ((mc).ss_flags & SS_NARROWISINVALID))
| #define GET_CR21(mc)   (USE_64BIT_REGS(mc) ? (mc).ss_wide.ss_64.ss_cr21 : (mc).ss_narrow.ss_cr21)
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (GET_CR21 (scp->sc_sl.sl_ss));
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:13160: result: no
configure:13168: checking whether a fault handler according to OSF/1 Alpha works
configure:13304: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7492: errors
configure:13304: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:58[stdin:278] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:312] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (scp->sc_traparg_a0);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:13315: result: no
configure:13323: checking whether a fault handler according to NetBSD Alpha works
configure:13459: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7500: errors
configure:13459: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/././src/fault-netbsd-alpha.c:25[stdin:211] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/././src/fault-netbsd-alpha.c:36[stdin:217] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:305] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:305] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:326] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:326] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:326] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:326] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:332] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| #include "./src/fault-netbsd-alpha.c"
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (get_fault_addr (scp));
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:13470: result: no
configure:13478: checking whether a fault handler according to AIX works
configure:13614: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7508: errors
configure:13614: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:58[stdin:278] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:312] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (scp->sc_jmpbuf.jmp_context.o_vaddr);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:13625: result: no
configure:13633: checking whether a fault handler according to MacOSX/Darwin7 PowerPC works
configure:13768: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: ././src/fault-macosdarwin7-powerpc.c:19 conftest.c:28 Could not find include file <ucontext.h>
/usr/jens/dvl/libsigsegv-2.10/././src/fault-macosdarwin7-powerpc.c:36[stdin:216] syntax error, last name: siginfo_t
cc: cpp: 8c 7515: error
cpp: conftest.c:30 Could not find include file <sys/mman.h>
configure:13768: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| #include "./src/fault-macosdarwin7-powerpc.c"
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, siginfo_t *sip, ucontext_t *ucp)
| {
|   void *fault_address = (void *) (get_fault_addr (sip, ucp));
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| action.sa_sigaction = &sigsegv_handler;
|    action.sa_flags = SA_SIGINFO;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:13779: result: no
configure:13788: checking whether a fault handler according to MacOSX/Darwin5 PowerPC works
configure:13924: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7524: errors
configure:13924: $? = 1
configure: program exited with status 1
ult-macosdarwin5-powerpc.c:36[stdin:217] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/././src/fault-macosdarwin5-powerpc.c:37[stdin:218] structure not fully declared sigcontext
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:390] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:390] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:411] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:411] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:411] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:411] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:417] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| #include "./src/fault-macosdarwin5-powerpc.c"
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (get_fault_addr (scp));
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:13935: result: no
configure:13944: checking whether a fault handler according to Hurd works
configure:14080: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <sys/mman.h>
cc: 8c: cpp 7532: errors
configure:14080: $? = 1
configure: program exited with status 1
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:65[stdin:285] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_READ
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: PROT_WRITE
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: map_flags
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:306] name not declared: zero_fd
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:312] name not declared: PROT_READ
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #if HAVE_SYS_SIGNAL_H
| # include <sys/signal.h>
| #endif
| 
| #include <sys/types.h>
| #include <sys/mman.h>
| #if HAVE_MMAP_DEVZERO
| # include <fcntl.h>
| # ifndef MAP_FILE
| #  define MAP_FILE 0
| # endif
| #endif
| #ifndef PROT_NONE
| # define PROT_NONE 0
| #endif
| #if HAVE_MMAP_ANON
| # define zero_fd -1
| # define map_flags MAP_ANON | MAP_PRIVATE
| #elif HAVE_MMAP_ANONYMOUS
| # define zero_fd -1
| # define map_flags MAP_ANONYMOUS | MAP_PRIVATE
| #elif HAVE_MMAP_DEVZERO
| static int zero_fd;
| # define map_flags MAP_FILE | MAP_PRIVATE
| #endif
| #if defined __linux__ && (defined __s390__ || defined __s390x__)
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS (0x1000UL - 1)
| #else
| # define SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS 0UL
| #endif
| unsigned long page;
| int handler_called = 0;
| void sigsegv_handler (int sig, int code, struct sigcontext *scp)
| {
|   void *fault_address = (void *) (code);
|   handler_called++;
|   if (handler_called == 10)
|     exit (4);
|   if (fault_address
|       != (void*)((page + 0x678) & ~SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS))
|     exit (3);
|   if (mprotect ((void *) page, 0x10000, PROT_READ | PROT_WRITE) < 0)
|     exit (2);
| }
| void crasher (unsigned long p)
| {
|   *(int *) (p + 0x678) = 42;
| }
| int main ()
| {
|   void *p;
|   struct sigaction action;
|   /* Preparations.  */
| #if !HAVE_MMAP_ANON && !HAVE_MMAP_ANONYMOUS && HAVE_MMAP_DEVZERO
|   zero_fd = open ("/dev/zero", O_RDONLY, 0644);
| #endif
|   /* Setup some mmaped memory.  */
| #ifdef __hpux
|   /* HP-UX 10 mmap() often fails when given a hint.  So give the OS complete
|      freedom about the address range.  */
|   p = mmap ((void *) 0,          0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #else
|   p = mmap ((void *) 0x12340000, 0x10000, PROT_READ | PROT_WRITE, map_flags, zero_fd, 0);
| #endif
|   if (p == (void *)(-1))
|     exit (2);
|   page = (unsigned long) p;
|   /* Make it read-only.  */
|   if (mprotect ((void *) page, 0x10000, PROT_READ) < 0)
|     exit (2);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset(&action.sa_mask);
| 
|   action.sa_handler = (void (*) (int)) &sigsegv_handler;
|   action.sa_flags = 0;
| 
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* The first write access should invoke the handler and then complete.  */
|   crasher (page);
|   /* The second write access should not invoke the handler.  */
|   crasher (page);
|   /* Check that the handler was called only once.  */
|   if (handler_called != 1)
|     exit (1);
|   /* Test passed!  */
|   return 0;
| }
configure:14091: result: no
configure:14445: checking for the fault handler specifics
configure:14456: result: none
configure:14481: checking if the system supports catching SIGSEGV
configure:14483: result: no
configure:14496: checking for stack direction
configure:14593: result: grows down
configure:14604: checking for PIOCMAP in sys/procfs.h
configure:14621: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:27[stdin:28] syntax error, last name: y
/usr/jens/dvl/libsigsegv-2.10/conftest.c:27[stdin:28] name not declared: PIOCNMAP
/usr/jens/dvl/libsigsegv-2.10/conftest.c:27[stdin:28] name not declared: PIOCMAP
configure:14621: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| /* end confdefs.h.  */
| #include <sys/procfs.h>
| int
| main ()
| {
| int x = PIOCNMAP + PIOCMAP; prmap_t y;
|   ;
|   return 0;
| }
configure:14630: result: no
configure:14635: checking for mquery
configure:14635: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
main: undefined: mquery
configure:14635: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| /* end confdefs.h.  */
| /* Define mquery to an innocuous variant, in case <limits.h> declares mquery.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define mquery innocuous_mquery
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char mquery (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef mquery
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char mquery ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_mquery || defined __stub___mquery
| choke me
| #endif
| 
| int
| main ()
| {
| return mquery ();
|   ;
|   return 0;
| }
configure:14635: result: no
configure:14635: checking for mincore
configure:14635: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
main: undefined: mincore
configure:14635: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| /* end confdefs.h.  */
| /* Define mincore to an innocuous variant, in case <limits.h> declares mincore.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define mincore innocuous_mincore
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char mincore (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef mincore
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char mincore ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_mincore || defined __stub___mincore
| choke me
| #endif
| 
| int
| main ()
| {
| return mincore ();
|   ;
|   return 0;
| }
configure:14635: result: no
configure:14681: checking for getrlimit
configure:14681: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
main: undefined: getrlimit
configure:14681: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| /* Define getrlimit to an innocuous variant, in case <limits.h> declares getrlimit.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define getrlimit innocuous_getrlimit
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char getrlimit (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef getrlimit
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char getrlimit ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_getrlimit || defined __stub___getrlimit
| choke me
| #endif
| 
| int
| main ()
| {
| return getrlimit ();
|   ;
|   return 0;
| }
configure:14681: result: no
configure:14681: checking for setrlimit
configure:14681: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
main: undefined: setrlimit
configure:14681: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| /* Define setrlimit to an innocuous variant, in case <limits.h> declares setrlimit.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define setrlimit innocuous_setrlimit
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char setrlimit (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef setrlimit
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char setrlimit ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_setrlimit || defined __stub___setrlimit
| choke me
| #endif
| 
| int
| main ()
| {
| return setrlimit ();
|   ;
|   return 0;
| }
configure:14681: result: no
configure:14697: checking for sigaltstack
configure:14697: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
main: undefined: sigaltstack
configure:14697: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| /* Define sigaltstack to an innocuous variant, in case <limits.h> declares sigaltstack.
|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
| #define sigaltstack innocuous_sigaltstack
| 
| /* System header to define __stub macros and hopefully few prototypes,
|     which can conflict with char sigaltstack (); below.
|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
|     <limits.h> exists even on freestanding compilers.  */
| 
| #ifdef __STDC__
| # include <limits.h>
| #else
| # include <assert.h>
| #endif
| 
| #undef sigaltstack
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char sigaltstack ();
| /* The GNU C library defines this for functions which it implements
|     to always fail with ENOSYS.  Some functions are actually named
|     something starting with __ and the normal name is an alias.  */
| #if defined __stub_sigaltstack || defined __stub___sigaltstack
| choke me
| #endif
| 
| int
| main ()
| {
| return sigaltstack ();
|   ;
|   return 0;
| }
configure:14697: result: no
configure:14726: checking for working sigaltstack
configure:14866: result: no
configure:14974: checking whether a signal handler can be left through longjmp
configure:15063: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:63[stdin:263] syntax error, last name: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:76[stdin:275] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:77[stdin:276] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:78[stdin:277] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:79[stdin:278] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:84[stdin:283] name not declared: SA_ONSTACK
cc: cpp: 8c 7632: error
configure:15063: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #include <setjmp.h>
| 
| #if HAVE_SETRLIMIT
| # include <sys/types.h>
| # include <sys/time.h>
| # include <sys/resource.h>
| #endif
| #ifndef SIGSTKSZ
| # define SIGSTKSZ 16384
| #endif
| jmp_buf mainloop;
| sigset_t mainsigset;
| int pass = 0;
| void stackoverflow_handler (int sig)
| {
|   pass++;
|   sigprocmask (SIG_SETMASK, &mainsigset, NULL);
|   {  }
|   longjmp (mainloop, pass);
| }
| volatile int * recurse_1 (volatile int n, volatile int *p)
| {
|   if (n >= 0)
|     *recurse_1 (n + 1, p) += n;
|   return p;
| }
| int recurse (volatile int n)
| {
|   int sum = 0;
|   return *recurse_1 (n, &sum);
| }
| char mystack[2 * SIGSTKSZ];
| int main ()
| {
|   stack_t altstack;
|   struct sigaction action;
|   sigset_t emptyset;
| #if defined HAVE_SETRLIMIT && defined RLIMIT_STACK
|   /* Before starting the endless recursion, try to be friendly to the user's
|      machine.  On some Linux 2.2.x systems, there is no stack limit for user
|      processes at all.  We don't want to kill such systems.  */
|   struct rlimit rl;
|   rl.rlim_cur = rl.rlim_max = 0x100000; /* 1 MB */
|   setrlimit (RLIMIT_STACK, &rl);
| #endif
|   /* Install the alternate stack.  Use the midpoint of mystack, to guard
|      against a buggy interpretation of ss_sp on IRIX.  */
|   altstack.ss_sp = mystack + SIGSTKSZ;
|   altstack.ss_size = SIGSTKSZ;
|   altstack.ss_flags = 0; /* no SS_DISABLE */
|   if (sigaltstack (&altstack, NULL) < 0)
|     exit (1);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset (&action.sa_mask);
|   action.sa_handler = &stackoverflow_handler;
|   action.sa_flags = SA_ONSTACK;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* Save the current signal mask.  */
|   sigemptyset (&emptyset);
|   sigprocmask (SIG_BLOCK, &emptyset, &mainsigset);
|   /* Provoke two stack overflows in a row.  */
|   if (setjmp (mainloop) < 2)
|     {
|       recurse (0);
|       exit (2);
|     }
|   exit (0);
| }
configure:15074: result: no
configure:15082: checking whether a signal handler can be left through longjmp and sigaltstack
configure:15181: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:50[stdin:250] syntax error, last name: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:51[stdin:251] name not declared: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:53[stdin:253] name not declared: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:53[stdin:253] name not declared: SA_ONSTACK
/usr/jens/dvl/libsigsegv-2.10/conftest.c:54[stdin:254] name not declared: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:73[stdin:273] syntax error, last name: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:86[stdin:285] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:286] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:88[stdin:287] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:89[stdin:288] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:94[stdin:293] name not declared: SA_ONSTACK
too many errors
cc: cpp: 8c 7640: error
configure:15181: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #include <setjmp.h>
| 
| #ifndef SS_ONSTACK
| #define SS_ONSTACK SA_ONSTACK
| #endif
| 
| #if HAVE_SETRLIMIT
| # include <sys/types.h>
| # include <sys/time.h>
| # include <sys/resource.h>
| #endif
| #ifndef SIGSTKSZ
| # define SIGSTKSZ 16384
| #endif
| jmp_buf mainloop;
| sigset_t mainsigset;
| int pass = 0;
| void stackoverflow_handler (int sig)
| {
|   pass++;
|   sigprocmask (SIG_SETMASK, &mainsigset, NULL);
|   { stack_t ss;
|    if (sigaltstack (NULL, &ss) >= 0)
|      {
|        ss.ss_flags &= ~SS_ONSTACK;
|        sigaltstack (&ss, NULL);
|      }
|    }
|   longjmp (mainloop, pass);
| }
| volatile int * recurse_1 (volatile int n, volatile int *p)
| {
|   if (n >= 0)
|     *recurse_1 (n + 1, p) += n;
|   return p;
| }
| int recurse (volatile int n)
| {
|   int sum = 0;
|   return *recurse_1 (n, &sum);
| }
| char mystack[2 * SIGSTKSZ];
| int main ()
| {
|   stack_t altstack;
|   struct sigaction action;
|   sigset_t emptyset;
| #if defined HAVE_SETRLIMIT && defined RLIMIT_STACK
|   /* Before starting the endless recursion, try to be friendly to the user's
|      machine.  On some Linux 2.2.x systems, there is no stack limit for user
|      processes at all.  We don't want to kill such systems.  */
|   struct rlimit rl;
|   rl.rlim_cur = rl.rlim_max = 0x100000; /* 1 MB */
|   setrlimit (RLIMIT_STACK, &rl);
| #endif
|   /* Install the alternate stack.  Use the midpoint of mystack, to guard
|      against a buggy interpretation of ss_sp on IRIX.  */
|   altstack.ss_sp = mystack + SIGSTKSZ;
|   altstack.ss_size = SIGSTKSZ;
|   altstack.ss_flags = 0; /* no SS_DISABLE */
|   if (sigaltstack (&altstack, NULL) < 0)
|     exit (1);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset (&action.sa_mask);
|   action.sa_handler = &stackoverflow_handler;
|   action.sa_flags = SA_ONSTACK;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* Save the current signal mask.  */
|   sigemptyset (&emptyset);
|   sigprocmask (SIG_BLOCK, &emptyset, &mainsigset);
|   /* Provoke two stack overflows in a row.  */
|   if (setjmp (mainloop) < 2)
|     {
|       recurse (0);
|       exit (2);
|     }
|   exit (0);
| }
configure:15192: result: no
configure:15200: checking whether a signal handler can be left through longjmp and setcontext
configure:15304: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <ucontext.h>
cc: 8c: cpp 7649: errors
/usr/jens/dvl/libsigsegv-2.10/conftest.c:50[stdin:250] syntax error, last name: ucontext_t$2
/usr/jens/dvl/libsigsegv-2.10/conftest.c:52[stdin:252] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:54[stdin:254] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:54[stdin:254] name not declared: SA_ONSTACK
/usr/jens/dvl/libsigsegv-2.10/conftest.c:56[stdin:256] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:56[stdin:256] name not declared: SA_ONSTACK
/usr/jens/dvl/libsigsegv-2.10/conftest.c:58[stdin:258] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:77[stdin:277] syntax error, last name: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:91[stdin:289] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:92[stdin:290] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:291] name not declared: altstack
too many errors
configure:15304: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #include <setjmp.h>
| #include <ucontext.h>
| #ifndef SS_ONSTACK
| #define SS_ONSTACK SA_ONSTACK
| #endif
| 
| #if HAVE_SETRLIMIT
| # include <sys/types.h>
| # include <sys/time.h>
| # include <sys/resource.h>
| #endif
| #ifndef SIGSTKSZ
| # define SIGSTKSZ 16384
| #endif
| jmp_buf mainloop;
| sigset_t mainsigset;
| int pass = 0;
| void stackoverflow_handler (int sig)
| {
|   pass++;
|   sigprocmask (SIG_SETMASK, &mainsigset, NULL);
|   { static int fl;
|    static ucontext_t uc;
|    fl = 0;
|    if (getcontext (&uc) >= 0)
|      if (fl == 0)
|        if (uc.uc_stack.ss_flags & SS_ONSTACK)
|          {
|            uc.uc_stack.ss_flags &= ~SS_ONSTACK;
|            fl = 1;
|            setcontext (&uc);
|          }
|    }
|   longjmp (mainloop, pass);
| }
| volatile int * recurse_1 (volatile int n, volatile int *p)
| {
|   if (n >= 0)
|     *recurse_1 (n + 1, p) += n;
|   return p;
| }
| int recurse (volatile int n)
| {
|   int sum = 0;
|   return *recurse_1 (n, &sum);
| }
| char mystack[2 * SIGSTKSZ];
| int main ()
| {
|   stack_t altstack;
|   struct sigaction action;
|   sigset_t emptyset;
| #if defined HAVE_SETRLIMIT && defined RLIMIT_STACK
|   /* Before starting the endless recursion, try to be friendly to the user's
|      machine.  On some Linux 2.2.x systems, there is no stack limit for user
|      processes at all.  We don't want to kill such systems.  */
|   struct rlimit rl;
|   rl.rlim_cur = rl.rlim_max = 0x100000; /* 1 MB */
|   setrlimit (RLIMIT_STACK, &rl);
| #endif
|   /* Install the alternate stack.  Use the midpoint of mystack, to guard
|      against a buggy interpretation of ss_sp on IRIX.  */
|   altstack.ss_sp = mystack + SIGSTKSZ;
|   altstack.ss_size = SIGSTKSZ;
|   altstack.ss_flags = 0; /* no SS_DISABLE */
|   if (sigaltstack (&altstack, NULL) < 0)
|     exit (1);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset (&action.sa_mask);
|   action.sa_handler = &stackoverflow_handler;
|   action.sa_flags = SA_ONSTACK;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* Save the current signal mask.  */
|   sigemptyset (&emptyset);
|   sigprocmask (SIG_BLOCK, &emptyset, &mainsigset);
|   /* Provoke two stack overflows in a row.  */
|   if (setjmp (mainloop) < 2)
|     {
|       recurse (0);
|       exit (2);
|     }
|   exit (0);
| }
configure:15315: result: no
configure:15337: checking whether a signal handler can be left through siglongjmp
configure:15424: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:61[stdin:261] syntax error, last name: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:77[stdin:276] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:78[stdin:277] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:79[stdin:278] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:80[stdin:279] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:85[stdin:284] name not declared: SA_ONSTACK
cc: cpp: 8c 7656: error
configure:15424: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #include <setjmp.h>
| 
| #if HAVE_SETRLIMIT
| # include <sys/types.h>
| # include <sys/time.h>
| # include <sys/resource.h>
| #endif
| #ifndef SIGSTKSZ
| # define SIGSTKSZ 16384
| #endif
| sigjmp_buf mainloop;
| int pass = 0;
| void stackoverflow_handler (int sig)
| {
|   pass++;
|   {  }
|   siglongjmp (mainloop, pass);
| }
| volatile int * recurse_1 (volatile int n, volatile int *p)
| {
|   if (n >= 0)
|     *recurse_1 (n + 1, p) += n;
|   return p;
| }
| int recurse (volatile int n)
| {
|   int sum = 0;
|   return *recurse_1 (n, &sum);
| }
| char mystack[2 * SIGSTKSZ];
| int main ()
| {
|   stack_t altstack;
|   struct sigaction action;
| #ifdef __BEOS__
|   /* On BeOS, this would hang, burning CPU time.  Better fail than hang.  */
|   exit (1);
| #endif
| #if defined HAVE_SETRLIMIT && defined RLIMIT_STACK
|   /* Before starting the endless recursion, try to be friendly to the user's
|      machine.  On some Linux 2.2.x systems, there is no stack limit for user
|      processes at all.  We don't want to kill such systems.  */
|   struct rlimit rl;
|   rl.rlim_cur = rl.rlim_max = 0x100000; /* 1 MB */
|   setrlimit (RLIMIT_STACK, &rl);
| #endif
|   /* Install the alternate stack.  Use the midpoint of mystack, to guard
|      against a buggy interpretation of ss_sp on IRIX.  */
|   altstack.ss_sp = mystack + SIGSTKSZ;
|   altstack.ss_size = SIGSTKSZ;
|   altstack.ss_flags = 0; /* no SS_DISABLE */
|   if (sigaltstack (&altstack, NULL) < 0)
|     exit (1);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset (&action.sa_mask);
|   action.sa_handler = &stackoverflow_handler;
|   action.sa_flags = SA_ONSTACK;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* Provoke two stack overflows in a row.  */
|   if (sigsetjmp (mainloop, 1) < 2)
|     {
|       recurse (0);
|       exit (2);
|     }
|   exit (0);
| }
configure:15435: result: no
configure:15443: checking whether a signal handler can be left through siglongjmp and sigaltstack
configure:15540: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:48[stdin:248] syntax error, last name: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:49[stdin:249] name not declared: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:51[stdin:251] name not declared: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:51[stdin:251] name not declared: SA_ONSTACK
/usr/jens/dvl/libsigsegv-2.10/conftest.c:52[stdin:252] name not declared: ss
/usr/jens/dvl/libsigsegv-2.10/conftest.c:71[stdin:271] syntax error, last name: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:87[stdin:286] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:88[stdin:287] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:89[stdin:288] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:90[stdin:289] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:95[stdin:294] name not declared: SA_ONSTACK
too many errors
cc: cpp: 8c 7664: error
configure:15540: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #include <setjmp.h>
| 
| #ifndef SS_ONSTACK
| #define SS_ONSTACK SA_ONSTACK
| #endif
| 
| #if HAVE_SETRLIMIT
| # include <sys/types.h>
| # include <sys/time.h>
| # include <sys/resource.h>
| #endif
| #ifndef SIGSTKSZ
| # define SIGSTKSZ 16384
| #endif
| sigjmp_buf mainloop;
| int pass = 0;
| void stackoverflow_handler (int sig)
| {
|   pass++;
|   { stack_t ss;
|    if (sigaltstack (NULL, &ss) >= 0)
|      {
|        ss.ss_flags &= ~SS_ONSTACK;
|        sigaltstack (&ss, NULL);
|      }
|    }
|   siglongjmp (mainloop, pass);
| }
| volatile int * recurse_1 (volatile int n, volatile int *p)
| {
|   if (n >= 0)
|     *recurse_1 (n + 1, p) += n;
|   return p;
| }
| int recurse (volatile int n)
| {
|   int sum = 0;
|   return *recurse_1 (n, &sum);
| }
| char mystack[2 * SIGSTKSZ];
| int main ()
| {
|   stack_t altstack;
|   struct sigaction action;
| #ifdef __BEOS__
|   /* On BeOS, this would hang, burning CPU time.  Better fail than hang.  */
|   exit (1);
| #endif
| #if defined HAVE_SETRLIMIT && defined RLIMIT_STACK
|   /* Before starting the endless recursion, try to be friendly to the user's
|      machine.  On some Linux 2.2.x systems, there is no stack limit for user
|      processes at all.  We don't want to kill such systems.  */
|   struct rlimit rl;
|   rl.rlim_cur = rl.rlim_max = 0x100000; /* 1 MB */
|   setrlimit (RLIMIT_STACK, &rl);
| #endif
|   /* Install the alternate stack.  Use the midpoint of mystack, to guard
|      against a buggy interpretation of ss_sp on IRIX.  */
|   altstack.ss_sp = mystack + SIGSTKSZ;
|   altstack.ss_size = SIGSTKSZ;
|   altstack.ss_flags = 0; /* no SS_DISABLE */
|   if (sigaltstack (&altstack, NULL) < 0)
|     exit (1);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset (&action.sa_mask);
|   action.sa_handler = &stackoverflow_handler;
|   action.sa_flags = SA_ONSTACK;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* Provoke two stack overflows in a row.  */
|   if (sigsetjmp (mainloop, 1) < 2)
|     {
|       recurse (0);
|       exit (2);
|     }
|   exit (0);
| }
configure:15551: result: no
configure:15559: checking whether a signal handler can be left through siglongjmp and setcontext
configure:15661: cc -o conftest -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS   conftest.c  >&5
cpp: conftest.c:30 Could not find include file <ucontext.h>
cc: 8c: cpp 7673: errors
/usr/jens/dvl/libsigsegv-2.10/conftest.c:48[stdin:248] syntax error, last name: ucontext_t$2
/usr/jens/dvl/libsigsegv-2.10/conftest.c:50[stdin:250] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:52[stdin:252] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:52[stdin:252] name not declared: SA_ONSTACK
/usr/jens/dvl/libsigsegv-2.10/conftest.c:54[stdin:254] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:54[stdin:254] name not declared: SA_ONSTACK
/usr/jens/dvl/libsigsegv-2.10/conftest.c:56[stdin:256] name not declared: uc
/usr/jens/dvl/libsigsegv-2.10/conftest.c:75[stdin:275] syntax error, last name: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:92[stdin:290] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:93[stdin:291] name not declared: altstack
/usr/jens/dvl/libsigsegv-2.10/conftest.c:94[stdin:292] name not declared: altstack
too many errors
configure:15661: $? = 1
configure: program exited with status 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| /* end confdefs.h.  */
| 
| 
| #include <stdlib.h>
| #include <signal.h>
| #include <setjmp.h>
| #include <ucontext.h>
| #ifndef SS_ONSTACK
| #define SS_ONSTACK SA_ONSTACK
| #endif
| 
| #if HAVE_SETRLIMIT
| # include <sys/types.h>
| # include <sys/time.h>
| # include <sys/resource.h>
| #endif
| #ifndef SIGSTKSZ
| # define SIGSTKSZ 16384
| #endif
| sigjmp_buf mainloop;
| int pass = 0;
| void stackoverflow_handler (int sig)
| {
|   pass++;
|   { static int fl;
|    static ucontext_t uc;
|    fl = 0;
|    if (getcontext(&uc) >= 0)
|      if (fl == 0)
|        if (uc.uc_stack.ss_flags & SS_ONSTACK)
|          {
|            uc.uc_stack.ss_flags &= ~SS_ONSTACK;
|            fl = 1;
|            setcontext(&uc);
|          }
|    }
|   siglongjmp (mainloop, pass);
| }
| volatile int * recurse_1 (volatile int n, volatile int *p)
| {
|   if (n >= 0)
|     *recurse_1 (n + 1, p) += n;
|   return p;
| }
| int recurse (volatile int n)
| {
|   int sum = 0;
|   return *recurse_1 (n, &sum);
| }
| char mystack[2 * SIGSTKSZ];
| int main ()
| {
|   stack_t altstack;
|   struct sigaction action;
| #ifdef __BEOS__
|   /* On BeOS, this would hang, burning CPU time.  Better fail than hang.  */
|   exit (1);
| #endif
| #if defined HAVE_SETRLIMIT && defined RLIMIT_STACK
|   /* Before starting the endless recursion, try to be friendly to the user's
|      machine.  On some Linux 2.2.x systems, there is no stack limit for user
|      processes at all.  We don't want to kill such systems.  */
|   struct rlimit rl;
|   rl.rlim_cur = rl.rlim_max = 0x100000; /* 1 MB */
|   setrlimit (RLIMIT_STACK, &rl);
| #endif
|   /* Install the alternate stack.  Use the midpoint of mystack, to guard
|      against a buggy interpretation of ss_sp on IRIX.  */
|   altstack.ss_sp = mystack + SIGSTKSZ;
|   altstack.ss_size = SIGSTKSZ;
|   altstack.ss_flags = 0; /* no SS_DISABLE */
|   if (sigaltstack (&altstack, NULL) < 0)
|     exit (1);
|   /* Install the SIGSEGV handler.  */
|   sigemptyset (&action.sa_mask);
|   action.sa_handler = &stackoverflow_handler;
|   action.sa_flags = SA_ONSTACK;
|   sigaction (SIGSEGV, &action, (struct sigaction *) NULL);
|   sigaction (SIGBUS, &action, (struct sigaction *) NULL);
|   /* Provoke two stack overflows in a row.  */
|   if (sigsetjmp (mainloop, 1) < 2)
|     {
|       recurse (0);
|       exit (2);
|     }
|   exit (0);
| }
configure:15672: result: no
configure:15711: checking if the system supports catching stack overflow
configure:15798: result: no
configure:15932: checking for uintptr_t
configure:15932: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
configure:15932: $? = 0
configure:15932: cc -c -D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS  conftest.c >&5
/usr/jens/dvl/libsigsegv-2.10/conftest.c:63[stdin:898] syntax error, last name: uintptr_t
configure:15932: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME ""
| #define PACKAGE_TARNAME ""
| #define PACKAGE_VERSION ""
| #define PACKAGE_STRING ""
| #define PACKAGE_BUGREPORT ""
| #define PACKAGE_URL ""
| #define PACKAGE "libsigsegv"
| #define VERSION "2.10"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_UNISTD_H 1
| #define LT_OBJDIR ".libs/"
| #define CFG_SIGNALS "signals.h"
| #define HAVE_UNISTD_H 1
| #define CFG_FAULT "fault-none.h"
| #define CFG_MACHFAULT "fault-none.h"
| #define STACK_DIRECTION -1
| #define CFG_STACKVMA "stackvma-none.c"
| #define CFG_LEAVE "leave-none.c"
| #define CFG_HANDLER "handler-none.c"
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uintptr_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:15932: result: yes
configure:15972: checking whether to activate relocatable installation
configure:15987: result: no
configure:16133: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by config.status, which was
generated by GNU Autoconf 2.68.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on cirno

config.status:1105: creating Makefile
config.status:1105: creating src/Makefile
config.status:1105: creating src/sigsegv.h
config.status:1105: creating tests/Makefile
config.status:1105: creating config.h
config.status:1334: executing depfiles commands
config.status:1334: executing libtool commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=i386-unknown-plan9
ac_cv_c_compiler_gnu=no
ac_cv_env_CC_set=
ac_cv_env_CC_value=
ac_cv_env_CFLAGS_set=set
ac_cv_env_CFLAGS_value='-D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS'
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_func_getrlimit=no
ac_cv_func_mincore=no
ac_cv_func_mquery=no
ac_cv_func_setrlimit=no
ac_cv_func_sigaltstack=no
ac_cv_header_dlfcn_h=no
ac_cv_header_inttypes_h=yes
ac_cv_header_memory_h=no
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=no
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=no
ac_cv_header_sys_signal_h=no
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_unistd_h=yes
ac_cv_host=i386-unknown-plan9
ac_cv_objext=o
ac_cv_path_EGREP=/bin/egrep
ac_cv_path_FGREP=/bin/fgrep
ac_cv_path_GREP=grep
ac_cv_path_SED=/bin/gsed
ac_cv_prog_AWK=gawk
ac_cv_prog_CC=cc
ac_cv_prog_CPP='cc -E'
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c89=
ac_cv_prog_cc_g=yes
ac_cv_prog_make_make_set=yes
ac_cv_type_uintptr_t=yes
am_cv_CC_dependencies_compiler_type=none
lt_cv_ar_at_file=no
lt_cv_deplibs_check_method=unknown
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/bin/ld
lt_cv_path_NM=/bin/nm
lt_cv_path_mainfest_tool=no
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic=' -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_gnu_ld=no
lt_cv_sharedlib_from_linklib_cmd='print -r --'
lt_cv_sys_global_symbol_pipe='sed -n -e '\''s/^.*[	 ]\([BCDEGRST][BCDEGRST]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p'\'' | sed '\''/ __gnu_lto/d'\'
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \([^ ]*\)[ ]*$/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[BCDEGRST]* \([^ ]*\) \([^ ]*\)$/  {"\2", (void *) \&\2},/p'\'
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \([^ ]*\)[ ]*$/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[BCDEGRST]* \([^ ]*\) \(lib[^ ]*\)$/  {"\2", (void *) \&\2},/p'\'' -e '\''s/^[BCDEGRST]* \([^ ]*\) \([^ ]*\)$/  {"lib\2", (void *) \&\2},/p'\'
lt_cv_sys_global_symbol_to_cdecl='sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[BCDEGRST]* .* \(.*\)$/extern char \1;/p'\'
lt_cv_sys_max_cmd_len=512
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop
sv_cv_fault_aix=no
sv_cv_fault_bsd=no
sv_cv_fault_hpux_hppa=no
sv_cv_fault_hurd=no
sv_cv_fault_include=none
sv_cv_fault_irix=no
sv_cv_fault_linux_hppa=no
sv_cv_fault_linux_i386=no
sv_cv_fault_linux_i386_old=no
sv_cv_fault_linux_m68k=no
sv_cv_fault_linux_powerpc=no
sv_cv_fault_macosdarwin5_ppc=no
sv_cv_fault_macosdarwin7_ppc=no
sv_cv_fault_netbsd_alpha=no
sv_cv_fault_osf_alpha=no
sv_cv_fault_posix=no
sv_cv_func_getpagesize=no
sv_cv_func_mmap_anon=no
sv_cv_func_mmap_anonymous=no
sv_cv_func_mmap_devzero=no
sv_cv_func_sysconf_pagesize=no
sv_cv_have_sigsegv_recovery=no
sv_cv_have_stack_overflow_recovery=no
sv_cv_host=i386-unknown-plan9
sv_cv_leave_handler_longjmp=no
sv_cv_leave_handler_longjmp_setcontext=no
sv_cv_leave_handler_longjmp_sigaltstack=no
sv_cv_leave_handler_siglongjmp=no
sv_cv_leave_handler_siglongjmp_setcontext=no
sv_cv_leave_handler_siglongjmp_sigaltstack=no
sv_cv_macro_pagesize=no
sv_cv_procfsvma=no
sv_cv_sigaltstack=no
sv_cv_stack_direction=-1
sv_cv_stack_direction_msg='grows down'

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/missing --run aclocal-1.11'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/missing --run tar'
AR='ar'
AUTOCONF='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/missing --run autoconf'
AUTOHEADER='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/missing --run autoheader'
AUTOMAKE='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/missing --run automake-1.11'
AWK='gawk'
CC='cc'
CCDEPMODE='depmode=none'
CFG_HANDLER='handler-none.c'
CFG_LEAVE='leave-none.c'
CFG_STACKVMA='stackvma-none.c'
CFLAGS='-D_POSIX_SOURCE -D_SUSV2_SOURCE -D_RESEARCH_SOURCE -D_REENTRANT_SOURCE -D_BSD_EXTENSION -D_NET_EXTENSION -D_LIMITS_EXTENSION -D_C99_SNPRINTF_EXTENSION -D_REGEXP_EXTENSION -DHAVE_SOCK_OPTS'
CPP='cc -E'
CPPFLAGS=''
CYGPATH_W='echo'
CYGWIN_FALSE=''
CYGWIN_TRUE='#'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='false'
DSYMUTIL=''
DUMPBIN=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/bin/egrep'
ENABLE_EFAULT_FALSE=''
ENABLE_EFAULT_TRUE='#'
EXEEXT=''
FAULT_CONTEXT='void'
FAULT_CONTEXT_INCLUDE=''
FGREP='/bin/fgrep'
GREP='grep'
HAVE_SIGSEGV_RECOVERY='0'
HAVE_STACK_OVERFLOW_RECOVERY='0'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/bin/ld'
LDFLAGS=''
LIBOBJS=''
LIBS=''
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIPO=''
LN_S='cp -p'
LTLIBOBJS=''
MAKEINFO='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/missing --run makeinfo'
MANIFEST_TOOL=':'
MKDIR_P='build-aux/install-sh -c -d'
NM='/bin/nm'
NMEDIT=''
OBJDUMP='false'
OBJEXT='o'
OTOOL64=''
OTOOL=''
PACKAGE='libsigsegv'
PACKAGE_BUGREPORT=''
PACKAGE_NAME=''
PACKAGE_STRING=''
PACKAGE_TARNAME=''
PACKAGE_URL=''
PACKAGE_VERSION=''
PATH_SEPARATOR=':'
PLATFORM='i386-unknown-plan9'
RANLIB='ranlib'
RELOCATABLE='no'
SED='/bin/gsed'
SET_MAKE=''
SHELL='/bin/sh'
STRIP='strip'
VERSION='2.10'
ac_ct_AR='ar'
ac_ct_CC=''
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE=''
am__fastdepCC_TRUE='#'
am__include='include'
am__isrc=''
am__leading_dot='.'
am__quote=''
am__tar='${AMTAR} chf - --owner=root --group=root "$$tardir"'
am__untar='${AMTAR} xf -'
bindir='${exec_prefix}/bin'
build='i386-unknown-plan9'
build_alias=''
build_cpu='i386'
build_os='plan9'
build_vendor='unknown'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='i386-unknown-plan9'
host_alias=''
host_cpu='i386'
host_os='plan9'
host_vendor='unknown'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /usr/jens/dvl/libsigsegv-2.10/build-aux/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(top_builddir)/build-aux/install-sh -c -d'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/386'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME ""
#define PACKAGE_TARNAME ""
#define PACKAGE_VERSION ""
#define PACKAGE_STRING ""
#define PACKAGE_BUGREPORT ""
#define PACKAGE_URL ""
#define PACKAGE "libsigsegv"
#define VERSION "2.10"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_UNISTD_H 1
#define LT_OBJDIR ".libs/"
#define CFG_SIGNALS "signals.h"
#define HAVE_UNISTD_H 1
#define CFG_FAULT "fault-none.h"
#define CFG_MACHFAULT "fault-none.h"
#define STACK_DIRECTION -1
#define CFG_STACKVMA "stackvma-none.c"
#define CFG_LEAVE "leave-none.c"
#define CFG_HANDLER "handler-none.c"
#define HAVE_UINTPTR_T 1

configure: exit 0
